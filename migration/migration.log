C:\Program Files (x86)\Intel\oneAPI\dpcpp-ct\2023.1.0\bin\dpct.exe  --in-root="D:\GitHub\Blaze" --vcxprojfile="D:\GitHub\Blaze\Blaze.vcxproj" --out-root="D:\GitHub\Blaze\migration" --keep-original-code
In file included from D:\GitHub\Blaze\src\main.cu:26:
D:\GitHub\Blaze\src\Parser.h:45:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneDir, getDirPath(actualpath).c_str());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\main.cu:26:
D:\GitHub\Blaze\src\Parser.h:54:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneName, d["sceneName"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\main.cu:26:
D:\GitHub\Blaze\src\Parser.h:56:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->particleFile, d["particleFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\main.cu:26:
D:\GitHub\Blaze\src\Parser.h:62:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->renderFile, d["renderFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\main.cu:27:
D:\GitHub\Blaze\src\Logger.h:43:20: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        tstruct = *localtime(&now);
                   ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h:494:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\main.cu:68:5: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
    strcpy(scenePath, argv[writeLog+1]);
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\main.cu:101:16: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
        printf(msg.c_str());
               ^~~~~~~~~~~
D:\GitHub\Blaze\src\main.cu:101:16: note: treat the string as an argument to avoid this
        printf(msg.c_str());
               ^
               "%s", 
In file included from D:\GitHub\Blaze\src\main.cu:29:
In file included from D:\GitHub\Blaze\src\RenderEngine.h:40:
D:\GitHub\Blaze\src\Volume.h:45:23: warning: DPCT1059:0: SYCL only supports 4-channel image format. Adjust the code.
        channelDesc = cudaCreateChannelDesc<float>();
                      ^
D:\GitHub\Blaze\src\Volume.h:70:25: warning: DPCT1003:1: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaCreateTextureObject(&volumeTex, &texRes, &texDescr, NULL));
                        ^
D:\GitHub\Blaze\src\Volume.h:74:25: warning: DPCT1003:2: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDestroyTextureObject(volumeTex));
                        ^
In file included from D:\GitHub\Blaze\src\RenderEngine.cu:30:
In file included from D:\GitHub\Blaze\src/RenderEngine.h:45:
D:\GitHub\Blaze\src/Parser.h:45:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneDir, getDirPath(actualpath).c_str());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\RenderEngine.cu:30:
In file included from D:\GitHub\Blaze\src/RenderEngine.h:45:
D:\GitHub\Blaze\src/Parser.h:54:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneName, d["sceneName"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\RenderEngine.cu:30:
In file included from D:\GitHub\Blaze\src/RenderEngine.h:45:
D:\GitHub\Blaze\src/Parser.h:56:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->particleFile, d["particleFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\RenderEngine.cu:30:
In file included from D:\GitHub\Blaze\src/RenderEngine.h:45:
D:\GitHub\Blaze\src/Parser.h:62:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->renderFile, d["renderFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:70:5: error: use of undeclared identifier 'surf3Dwrite'
    surf3Dwrite(filtered, volumeTexOut, i*sizeof(float), j, k);
    ^
D:\GitHub\Blaze\src\RenderEngine.cu:95:5: error: use of undeclared identifier 'surf3Dwrite'
    surf3Dwrite(output, scatterTex, i*sizeof(float), j, k);
    ^
D:\GitHub\Blaze\src\RenderEngine.cu:109:5: error: use of undeclared identifier 'surf3Dwrite'
    surf3Dwrite(output, tempTex, i*sizeof(float), j, k);
    ^
D:\GitHub\Blaze\src\RenderEngine.cu:412:9: warning: 'delete' applied to a pointer that was allocated with 'new[]'; did you mean 'delete[]'? [-Wmismatched-new-delete]
        delete rgba;
        ^
              []
D:\GitHub\Blaze\src\RenderEngine.cu:394:31: note: allocated with 'new[]' here
        unsigned char *rgba = new unsigned char[mRdrWidth*mRdrHeight*4];
                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:453:9: warning: 'strncpy' is deprecated: This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strncpy(header.channels[0].name, "B", 255); header.channels[0].name[strlen("B")] = '\0';
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:334:1: note: 'strncpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1935:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:454:9: warning: 'strncpy' is deprecated: This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strncpy(header.channels[1].name, "G", 255); header.channels[1].name[strlen("G")] = '\0';
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:334:1: note: 'strncpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1935:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:455:9: warning: 'strncpy' is deprecated: This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strncpy(header.channels[2].name, "R", 255); header.channels[2].name[strlen("R")] = '\0';
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:334:1: note: 'strncpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1935:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:317:5: warning: DPCT1049:3: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
    write_temp_to_3d_tex_kernel <<< gridSize, blockSize >>> (tempGrid, mTempVol->volumeSurf);
    ^
D:\GitHub\Blaze\src\RenderEngine.cu:357:5: warning: DPCT1049:4: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
    render_kernel <<< grid, block >>> (mFrameBuffer, tempGrid, mTempVol->volumeTex, mScatterFrontVol->volumeTex,
    ^
D:\GitHub\Blaze\src\RenderEngine.cu:327:9: warning: DPCT1049:5: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
        write_scatter_to_3d_tex_kernel <<< gridSizeScatter, blockSize >>> (tempGrid,
        ^
D:\GitHub\Blaze\src\RenderEngine.cu:337:13: warning: DPCT1049:6: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
            gaussian_blur_texture_kernel <<< gridSizeScatter, blockSize >>> (mScatterFrontVol->volumeTex,
            ^
D:\GitHub\Blaze\thirdparty\lodepng\lodepng.cpp:367:10: warning: 'fopen' is deprecated: This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
  file = fopen(filename, "rb");
         ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h:212:20: note: 'fopen' has been explicitly marked deprecated here
    _Check_return_ _CRT_INSECURE_DEPRECATE(fopen_s)
                   ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\thirdparty\lodepng\lodepng.cpp:389:10: warning: 'fopen' is deprecated: This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
  file = fopen(filename, "wb" );
         ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h:212:20: note: 'fopen' has been explicitly marked deprecated here
    _Check_return_ _CRT_INSECURE_DEPRECATE(fopen_s)
                   ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:25:
D:\GitHub\Blaze\thirdparty\cuda-noise\cuda_noise.cuh:806:17: warning: enumeration values 'BASIS_DISCRETE' and 'BASIS_SPOTS' not handled in switch [-Wswitch]
        switch (inFunc)
                ^~~~~~
D:\GitHub\Blaze\thirdparty\cuda-noise\cuda_noise.cuh:845:17: warning: enumeration values 'BASIS_DISCRETE' and 'BASIS_SPOTS' not handled in switch [-Wswitch]
        switch (outFunc)
                ^~~~~~~
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:27:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:35:
D:\GitHub\Blaze\src/Parser.h:45:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneDir, getDirPath(actualpath).c_str());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:27:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:35:
D:\GitHub\Blaze\src/Parser.h:54:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneName, d["sceneName"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:27:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:35:
D:\GitHub\Blaze\src/Parser.h:56:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->particleFile, d["particleFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:27:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:35:
D:\GitHub\Blaze\src/Parser.h:62:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->renderFile, d["renderFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\FluidSolver.cu:564:13: warning: DPCT1065:7: Consider replacing sycl::nd_item::barrier() with sycl::nd_item::barrier(sycl::access::fence_space::local_space) for better performance if there is no access to global memory.
            __syncthreads();
            ^
D:\GitHub\Blaze\src\FluidSolver.cu:800:13: warning: DPCT1049:8: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
            clear_back_buffer_kernel <<< grid, block >>> (d_mT, d_mU, d_mV, d_mW);
            ^
D:\GitHub\Blaze\src\FluidSolver.cu:807:13: warning: DPCT1049:9: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
            add_source_to_back_buffer_kernel <<< gridPart, blockPart >>> (d_mT, d_mU, d_mV, d_mW, d_mPartPos, d_mPartVel,
            ^
D:\GitHub\Blaze\src\FluidSolver.cu:813:13: warning: DPCT1049:10: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
            set_source_from_back_to_front_kernel <<< grid, block >>> (d_mT, d_mU, d_mV, d_mW);
            ^
D:\GitHub\Blaze\src\FluidSolver.cu:830:5: warning: DPCT1049:11: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
    compute_divergence_kernel <<< grid, block >>> (d_mRhs, d_mU, d_mV, d_mW, mWidth, mHeight,
    ^
D:\GitHub\Blaze\src\FluidSolver.cu:841:5: warning: DPCT1049:12: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
    gs_solve_kernel <<< gridGS, blockGS >>> (d_mRhs, d_mP, mDensity, mDx, mDt, mWidth, mHeight, mDepth, mMaxIter);
    ^
D:\GitHub\Blaze\src\FluidSolver.cu:850:5: warning: DPCT1049:13: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
    pressure_gradient_update_kernel <<< gridP, block >>> (d_mP, d_mU, d_mV, d_mW, mWidth, mHeight,
    ^
D:\GitHub\Blaze\src\FluidSolver.cu:942:5: warning: DPCT1049:14: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
    advect_RK3_kernel <<< gridT, block >>> (d_mT , d_mU, d_mV, d_mW, mDt, true);
    ^
D:\GitHub\Blaze\src\FluidSolver.cu:943:5: warning: DPCT1049:15: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
    advect_RK3_kernel <<< gridU, block >>> (d_mU , d_mU, d_mV, d_mW, mDt, false);
    ^
D:\GitHub\Blaze\src\FluidSolver.cu:944:5: warning: DPCT1049:16: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
    advect_RK3_kernel <<< gridV, block >>> (d_mV , d_mU, d_mV, d_mW, mDt, false);
    ^
D:\GitHub\Blaze\src\FluidSolver.cu:945:5: warning: DPCT1049:17: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
    advect_RK3_kernel <<< gridW, block >>> (d_mW , d_mU, d_mV, d_mW, mDt, false);
    ^
D:\GitHub\Blaze\src\FluidSolver.cu:869:9: warning: DPCT1049:18: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
        temperature_cooldown_kernel <<< gridT, block >>> (d_mT, mCoolingRate, mDt);
        ^
D:\GitHub\Blaze\src\FluidSolver.cu:879:9: warning: DPCT1049:19: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
        apply_drag_kernel <<< gridUVW, block >>> (d_mU, d_mV, d_mW, mDrag, mDt);
        ^
D:\GitHub\Blaze\src\FluidSolver.cu:889:9: warning: DPCT1049:20: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
        copy_velocity_to_back_buffer_kernel <<< gridUVW, block >>> (d_mU, d_mV, d_mW);
        ^
D:\GitHub\Blaze\src\FluidSolver.cu:892:9: warning: DPCT1049:21: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
        vorticity_confinement_kernel <<< gridT, block >>> (d_mT, d_mU, d_mV, d_mW, mVorticeConf, mDx, mDt);
        ^
D:\GitHub\Blaze\src\FluidSolver.cu:905:9: warning: DPCT1049:22: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
        add_buoyancy_kernel <<< gridV, block >>> (d_mT, d_mV, mBuoyancy, mGravity, mDt);
        ^
D:\GitHub\Blaze\src\FluidSolver.cu:915:9: warning: DPCT1049:23: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
        add_wind_kernel <<< gridUVW, block >>> (d_mU, d_mV, d_mW, mScn->windDir, mScn->windAmp, mScn->windSpeed,
        ^
D:\GitHub\Blaze\src\FluidSolver.cu:926:9: warning: DPCT1049:24: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
        compute_turbulence_kernel <<< gridUVW, block >>> (d_mT, d_mU, d_mV, d_mW, mTurbulenceAmp, mTurbulenceScale,
        ^
D:\GitHub\Blaze\src\FluidSolver.cu:931:9: warning: DPCT1049:25: The work-group size passed to the SYCL kernel may exceed the limit. To get the device limit, query info::device::max_work_group_size. Adjust the work-group size if needed.
        add_curl_noise_kernel <<< gridT, block >>> (d_mU, d_mV, d_mW, mDx, mDt);
        ^
In file included from D:\GitHub\Blaze\src\main.cu:26:
D:\GitHub\Blaze\src/Parser.h:45:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneDir, getDirPath(actualpath).c_str());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\main.cu:26:
D:\GitHub\Blaze\src/Parser.h:54:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneName, d["sceneName"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\main.cu:26:
D:\GitHub\Blaze\src/Parser.h:56:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->particleFile, d["particleFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\main.cu:26:
D:\GitHub\Blaze\src/Parser.h:62:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->renderFile, d["renderFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\main.cu:27:
D:\GitHub\Blaze\src/Logger.h:43:20: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        tstruct = *localtime(&now);
                   ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h:494:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\main.cu:68:5: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
    strcpy(scenePath, argv[writeLog+1]);
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\main.cu:101:16: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
        printf(msg.c_str());
               ^~~~~~~~~~~
D:\GitHub\Blaze\src\main.cu:101:16: note: treat the string as an argument to avoid this
        printf(msg.c_str());
               ^
               "%s", 
In file included from D:\GitHub\Blaze\src\main.cu:28:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:30:
D:\GitHub\Blaze\src/utils/helper_cuda.h:38:10: warning: DPCT1009:26: SYCL uses exceptions to report errors and does not use the error codes. The original code was commented out and a warning string was inserted. You need to rewrite this code.
  return cudaGetErrorName(error);
         ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:598:21: warning: DPCT1010:27: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
  cudaError_t err = cudaGetLastError();
                    ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:605:13: warning: DPCT1009:28: SYCL uses exceptions to report errors and does not use the error codes. The original code was commented out and a warning string was inserted. You need to rewrite this code.
            cudaGetErrorString(err));
            ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:617:21: warning: DPCT1010:29: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
  cudaError_t err = cudaGetLastError();
                    ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:624:13: warning: DPCT1009:30: SYCL uses exceptions to report errors and does not use the error codes. The original code was commented out and a warning string was inserted. You need to rewrite this code.
            cudaGetErrorString(err));
            ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:689:19: warning: DPCT1003:31: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
  checkCudaErrors(cudaGetDeviceCount(&device_count));
                  ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:715:19: warning: DPCT1003:32: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
  checkCudaErrors(cudaGetDeviceProperties(&deviceProp, devID));
                  ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:717:33: warning: DPCT1035:33: All SYCL devices can be used by the host to submit tasks. You may need to adjust this code.
  if (deviceProp.computeMode == cudaComputeModeProhibited) {
                                ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:724:7: warning: DPCT1005:34: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
  if (deviceProp.major < 1) {
      ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:729:19: warning: DPCT1093:35: The "devID" device may be not the one intended for use. Adjust the selected device if needed.
  checkCudaErrors(cudaSetDevice(devID));
                  ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:729:19: warning: DPCT1003:36: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
D:\GitHub\Blaze\src/utils/helper_cuda.h:744:19: warning: DPCT1003:37: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
  checkCudaErrors(cudaGetDeviceCount(&device_count));
                  ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:761:35: warning: DPCT1035:38: All SYCL devices can be used by the host to submit tasks. You may need to adjust this code.
    if (deviceProp.computeMode != cudaComputeModeProhibited) {
                                  ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:762:11: warning: DPCT1005:39: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
      if (deviceProp.major == 9999 && deviceProp.minor == 9999) {
          ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:766:33: warning: DPCT1005:40: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
            _ConvertSMVer2Cores(deviceProp.major, deviceProp.minor);
                                ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:816:21: warning: DPCT1093:41: The "devID" device may be not the one intended for use. Adjust the selected device if needed.
    checkCudaErrors(cudaSetDevice(devID));
                    ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:816:21: warning: DPCT1003:42: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
D:\GitHub\Blaze\src/utils/helper_cuda.h:817:21: warning: DPCT1003:43: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaGetDeviceProperties(&deviceProp, devID));
                    ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:819:29: warning: DPCT1005:44: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
           deviceProp.name, deviceProp.major, deviceProp.minor);
                            ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:831:19: warning: DPCT1003:45: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
  checkCudaErrors(cudaGetDeviceCount(&device_count));
                  ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:844:9: warning: DPCT1006:46: SYCL does not provide a standard API to differentiate between integrated and discrete GPU devices.
    if (deviceProp.integrated &&
        ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:845:36: warning: DPCT1035:47: All SYCL devices can be used by the host to submit tasks. You may need to adjust this code.
        (deviceProp.computeMode != cudaComputeModeProhibited)) {
                                   ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:846:23: warning: DPCT1093:48: The "current_device" device may be not the one intended for use. Adjust the selected device if needed.
      checkCudaErrors(cudaSetDevice(current_device));
                      ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:846:23: warning: DPCT1003:49: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
D:\GitHub\Blaze\src/utils/helper_cuda.h:847:23: warning: DPCT1003:50: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
      checkCudaErrors(cudaGetDeviceProperties(&deviceProp, current_device));
                      ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:849:47: warning: DPCT1005:51: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
             current_device, deviceProp.name, deviceProp.major,
                                              ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:850:14: warning: DPCT1005:52: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
             deviceProp.minor);
             ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:873:3: warning: DPCT1005:53: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
  deviceProp.major = 0;
  ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:874:3: warning: DPCT1005:54: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
  deviceProp.minor = 0;
  ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:878:19: warning: DPCT1003:55: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
  checkCudaErrors(cudaGetDeviceProperties(&deviceProp, dev));
                  ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:880:8: warning: DPCT1005:56: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
  if ((deviceProp.major > major_version) ||
       ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:881:8: warning: DPCT1005:57: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
      (deviceProp.major == major_version &&
       ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:882:8: warning: DPCT1005:58: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
       deviceProp.minor >= minor_version)) {
       ^
D:\GitHub\Blaze\src/utils/helper_cuda.h:884:29: warning: DPCT1005:59: The SYCL device version is different from CUDA Compute Compatibility. You may need to rewrite this code.
           deviceProp.name, deviceProp.major, deviceProp.minor);
                            ^
In file included from D:\GitHub\Blaze\src\main.cu:28:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:32:
In file included from D:\GitHub\Blaze\src/Grid.h:32:
D:\GitHub\Blaze\src/utils/helper_math.h:269:1: warning: DPCT1011:60: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator-(float2 &a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:273:1: warning: DPCT1011:61: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator-(int2 &a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:277:1: warning: DPCT1011:62: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator-(float3 &a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:281:1: warning: DPCT1011:63: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator-(int3 &a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:285:1: warning: DPCT1011:64: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator-(float4 &a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:289:1: warning: DPCT1011:65: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator-(int4 &a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:298:1: warning: DPCT1011:66: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator+(float2 a, float2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:302:1: warning: DPCT1011:67: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(float2 &a, float2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:307:1: warning: DPCT1011:68: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator+(float2 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:311:1: warning: DPCT1011:69: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator+(float b, float2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:315:1: warning: DPCT1011:70: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(float2 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:321:1: warning: DPCT1011:71: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator+(int2 a, int2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:325:1: warning: DPCT1011:72: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(int2 &a, int2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:330:1: warning: DPCT1011:73: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator+(int2 a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:334:1: warning: DPCT1011:74: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator+(int b, int2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:338:1: warning: DPCT1011:75: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(int2 &a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:344:1: warning: DPCT1011:76: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint2 operator+(uint2 a, uint2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:348:1: warning: DPCT1011:77: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(uint2 &a, uint2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:353:1: warning: DPCT1011:78: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint2 operator+(uint2 a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:357:1: warning: DPCT1011:79: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint2 operator+(uint b, uint2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:361:1: warning: DPCT1011:80: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(uint2 &a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:368:1: warning: DPCT1011:81: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator+(float3 a, float3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:372:1: warning: DPCT1011:82: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(float3 &a, float3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:378:1: warning: DPCT1011:83: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator+(float3 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:382:1: warning: DPCT1011:84: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(float3 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:389:1: warning: DPCT1011:85: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator+(int3 a, int3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:393:1: warning: DPCT1011:86: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(int3 &a, int3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:399:1: warning: DPCT1011:87: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator+(int3 a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:403:1: warning: DPCT1011:88: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(int3 &a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:410:1: warning: DPCT1011:89: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint3 operator+(uint3 a, uint3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:414:1: warning: DPCT1011:90: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(uint3 &a, uint3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:420:1: warning: DPCT1011:91: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint3 operator+(uint3 a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:424:1: warning: DPCT1011:92: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(uint3 &a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:431:1: warning: DPCT1011:93: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator+(int b, int3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:435:1: warning: DPCT1011:94: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint3 operator+(uint b, uint3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:439:1: warning: DPCT1011:95: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator+(float b, float3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:444:1: warning: DPCT1011:96: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator+(float4 a, float4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:448:1: warning: DPCT1011:97: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(float4 &a, float4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:455:1: warning: DPCT1011:98: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator+(float4 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:459:1: warning: DPCT1011:99: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator+(float b, float4 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:463:1: warning: DPCT1011:100: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(float4 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:471:1: warning: DPCT1011:101: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator+(int4 a, int4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:475:1: warning: DPCT1011:102: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(int4 &a, int4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:482:1: warning: DPCT1011:103: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator+(int4 a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:486:1: warning: DPCT1011:104: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator+(int b, int4 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:490:1: warning: DPCT1011:105: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(int4 &a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:498:1: warning: DPCT1011:106: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint4 operator+(uint4 a, uint4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:502:1: warning: DPCT1011:107: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(uint4 &a, uint4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:509:1: warning: DPCT1011:108: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint4 operator+(uint4 a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:513:1: warning: DPCT1011:109: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint4 operator+(uint b, uint4 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:517:1: warning: DPCT1011:110: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator+=(uint4 &a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:529:1: warning: DPCT1011:111: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator-(float2 a, float2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:533:1: warning: DPCT1011:112: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(float2 &a, float2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:538:1: warning: DPCT1011:113: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator-(float2 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:542:1: warning: DPCT1011:114: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator-(float b, float2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:546:1: warning: DPCT1011:115: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(float2 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:552:1: warning: DPCT1011:116: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator-(int2 a, int2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:556:1: warning: DPCT1011:117: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(int2 &a, int2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:561:1: warning: DPCT1011:118: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator-(int2 a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:565:1: warning: DPCT1011:119: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator-(int b, int2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:569:1: warning: DPCT1011:120: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(int2 &a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:575:1: warning: DPCT1011:121: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint2 operator-(uint2 a, uint2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:579:1: warning: DPCT1011:122: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(uint2 &a, uint2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:584:1: warning: DPCT1011:123: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint2 operator-(uint2 a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:588:1: warning: DPCT1011:124: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint2 operator-(uint b, uint2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:592:1: warning: DPCT1011:125: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(uint2 &a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:598:1: warning: DPCT1011:126: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator-(float3 a, float3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:602:1: warning: DPCT1011:127: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(float3 &a, float3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:608:1: warning: DPCT1011:128: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator-(float3 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:612:1: warning: DPCT1011:129: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator-(float b, float3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:616:1: warning: DPCT1011:130: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(float3 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:623:1: warning: DPCT1011:131: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator-(int3 a, int3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:627:1: warning: DPCT1011:132: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(int3 &a, int3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:633:1: warning: DPCT1011:133: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator-(int3 a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:637:1: warning: DPCT1011:134: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator-(int b, int3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:641:1: warning: DPCT1011:135: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(int3 &a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:648:1: warning: DPCT1011:136: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint3 operator-(uint3 a, uint3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:652:1: warning: DPCT1011:137: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(uint3 &a, uint3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:658:1: warning: DPCT1011:138: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint3 operator-(uint3 a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:662:1: warning: DPCT1011:139: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint3 operator-(uint b, uint3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:666:1: warning: DPCT1011:140: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(uint3 &a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:673:1: warning: DPCT1011:141: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator-(float4 a, float4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:677:1: warning: DPCT1011:142: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(float4 &a, float4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:684:1: warning: DPCT1011:143: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator-(float4 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:688:1: warning: DPCT1011:144: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(float4 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:696:1: warning: DPCT1011:145: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator-(int4 a, int4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:700:1: warning: DPCT1011:146: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(int4 &a, int4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:707:1: warning: DPCT1011:147: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator-(int4 a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:711:1: warning: DPCT1011:148: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator-(int b, int4 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:715:1: warning: DPCT1011:149: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(int4 &a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:723:1: warning: DPCT1011:150: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint4 operator-(uint4 a, uint4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:727:1: warning: DPCT1011:151: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(uint4 &a, uint4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:734:1: warning: DPCT1011:152: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint4 operator-(uint4 a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:738:1: warning: DPCT1011:153: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint4 operator-(uint b, uint4 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:742:1: warning: DPCT1011:154: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator-=(uint4 &a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:754:1: warning: DPCT1011:155: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator*(float2 a, float2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:758:1: warning: DPCT1011:156: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(float2 &a, float2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:763:1: warning: DPCT1011:157: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator*(float2 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:767:1: warning: DPCT1011:158: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator*(float b, float2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:771:1: warning: DPCT1011:159: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(float2 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:777:1: warning: DPCT1011:160: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator*(int2 a, int2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:781:1: warning: DPCT1011:161: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(int2 &a, int2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:786:1: warning: DPCT1011:162: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator*(int2 a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:790:1: warning: DPCT1011:163: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int2 operator*(int b, int2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:794:1: warning: DPCT1011:164: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(int2 &a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:800:1: warning: DPCT1011:165: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint2 operator*(uint2 a, uint2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:804:1: warning: DPCT1011:166: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(uint2 &a, uint2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:809:1: warning: DPCT1011:167: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint2 operator*(uint2 a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:813:1: warning: DPCT1011:168: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint2 operator*(uint b, uint2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:817:1: warning: DPCT1011:169: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(uint2 &a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:823:1: warning: DPCT1011:170: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator*(float3 a, float3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:827:1: warning: DPCT1011:171: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(float3 &a, float3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:833:1: warning: DPCT1011:172: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator*(float3 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:837:1: warning: DPCT1011:173: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator*(float b, float3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:841:1: warning: DPCT1011:174: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(float3 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:848:1: warning: DPCT1011:175: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator*(int3 a, int3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:852:1: warning: DPCT1011:176: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(int3 &a, int3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:858:1: warning: DPCT1011:177: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator*(int3 a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:862:1: warning: DPCT1011:178: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int3 operator*(int b, int3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:866:1: warning: DPCT1011:179: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(int3 &a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:873:1: warning: DPCT1011:180: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint3 operator*(uint3 a, uint3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:877:1: warning: DPCT1011:181: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(uint3 &a, uint3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:883:1: warning: DPCT1011:182: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint3 operator*(uint3 a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:887:1: warning: DPCT1011:183: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint3 operator*(uint b, uint3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:891:1: warning: DPCT1011:184: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(uint3 &a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:898:1: warning: DPCT1011:185: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator*(float4 a, float4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:902:1: warning: DPCT1011:186: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(float4 &a, float4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:909:1: warning: DPCT1011:187: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator*(float4 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:913:1: warning: DPCT1011:188: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator*(float b, float4 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:917:1: warning: DPCT1011:189: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(float4 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:925:1: warning: DPCT1011:190: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator*(int4 a, int4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:929:1: warning: DPCT1011:191: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(int4 &a, int4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:936:1: warning: DPCT1011:192: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator*(int4 a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:940:1: warning: DPCT1011:193: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ int4 operator*(int b, int4 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:944:1: warning: DPCT1011:194: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(int4 &a, int b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:952:1: warning: DPCT1011:195: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint4 operator*(uint4 a, uint4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:956:1: warning: DPCT1011:196: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(uint4 &a, uint4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:963:1: warning: DPCT1011:197: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint4 operator*(uint4 a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:967:1: warning: DPCT1011:198: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ uint4 operator*(uint b, uint4 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:971:1: warning: DPCT1011:199: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator*=(uint4 &a, uint b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:983:1: warning: DPCT1011:200: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator/(float2 a, float2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:987:1: warning: DPCT1011:201: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator/=(float2 &a, float2 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:992:1: warning: DPCT1011:202: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator/(float2 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:996:1: warning: DPCT1011:203: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator/=(float2 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1001:1: warning: DPCT1011:204: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float2 operator/(float b, float2 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1006:1: warning: DPCT1011:205: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator/(float3 a, float3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1010:1: warning: DPCT1011:206: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator/=(float3 &a, float3 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1016:1: warning: DPCT1011:207: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator/(float3 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1020:1: warning: DPCT1011:208: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator/=(float3 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1026:1: warning: DPCT1011:209: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float3 operator/(float b, float3 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1031:1: warning: DPCT1011:210: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator/(float4 a, float4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1035:1: warning: DPCT1011:211: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator/=(float4 &a, float4 b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1042:1: warning: DPCT1011:212: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator/(float4 a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1046:1: warning: DPCT1011:213: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ void operator/=(float4 &a, float b)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1053:1: warning: DPCT1011:214: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ float4 operator/(float b, float4 a)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1502:1: warning: DPCT1011:215: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ bool operator<(float3 &u, float3 v)
^
D:\GitHub\Blaze\src/utils/helper_math.h:1508:1: warning: DPCT1011:216: The tool detected overloaded operators for built-in vector types, which may conflict with the SYCL 2020 standard operators (see 4.14.2.1 Vec interface). The tool inserted a namespace to avoid the conflict. Use SYCL 2020 standard operators instead.
inline __host__ __device__ bool operator>(float3 &u, float3 v)
^
In file included from D:\GitHub\Blaze\src\main.cu:29:
In file included from D:\GitHub\Blaze\src/RenderEngine.h:40:
D:\GitHub\Blaze\src/Volume.h:46:25: warning: DPCT1003:217: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaMalloc3DArray(&content, &channelDesc, dataSize, cudaArraySurfaceLoadStore));
                        ^
D:\GitHub\Blaze\src/Volume.h:54:25: warning: DPCT1007:218: Migration of cudaCreateSurfaceObject is not supported.
        checkCudaErrors(cudaCreateSurfaceObject(&volumeSurf, &surfRes));
                        ^
D:\GitHub\Blaze\src/Volume.h:75:25: warning: DPCT1007:219: Migration of cudaDestroySurfaceObject is not supported.
        checkCudaErrors(cudaDestroySurfaceObject(volumeSurf));
                        ^
D:\GitHub\Blaze\src/Volume.h:76:25: warning: DPCT1003:220: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaFreeArray(content));
                        ^
In file included from D:\GitHub\Blaze\src\RenderEngine.cu:30:
In file included from D:\GitHub\Blaze\src/RenderEngine.h:45:
D:\GitHub\Blaze\src/Parser.h:45:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneDir, getDirPath(actualpath).c_str());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\RenderEngine.cu:30:
In file included from D:\GitHub\Blaze\src/RenderEngine.h:45:
D:\GitHub\Blaze\src/Parser.h:54:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneName, d["sceneName"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\RenderEngine.cu:30:
In file included from D:\GitHub\Blaze\src/RenderEngine.h:45:
D:\GitHub\Blaze\src/Parser.h:56:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->particleFile, d["particleFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\RenderEngine.cu:30:
In file included from D:\GitHub\Blaze\src/RenderEngine.h:45:
D:\GitHub\Blaze\src/Parser.h:62:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->renderFile, d["renderFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:70:5: error: use of undeclared identifier 'surf3Dwrite'
    surf3Dwrite(filtered, volumeTexOut, i*sizeof(float), j, k);
    ^
D:\GitHub\Blaze\src\RenderEngine.cu:95:5: error: use of undeclared identifier 'surf3Dwrite'
    surf3Dwrite(output, scatterTex, i*sizeof(float), j, k);
    ^
D:\GitHub\Blaze\src\RenderEngine.cu:109:5: error: use of undeclared identifier 'surf3Dwrite'
    surf3Dwrite(output, tempTex, i*sizeof(float), j, k);
    ^
D:\GitHub\Blaze\src\RenderEngine.cu:412:9: warning: 'delete' applied to a pointer that was allocated with 'new[]'; did you mean 'delete[]'? [-Wmismatched-new-delete]
        delete rgba;
        ^
              []
D:\GitHub\Blaze\src\RenderEngine.cu:394:31: note: allocated with 'new[]' here
        unsigned char *rgba = new unsigned char[mRdrWidth*mRdrHeight*4];
                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:453:9: warning: 'strncpy' is deprecated: This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strncpy(header.channels[0].name, "B", 255); header.channels[0].name[strlen("B")] = '\0';
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:334:1: note: 'strncpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1935:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:454:9: warning: 'strncpy' is deprecated: This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strncpy(header.channels[1].name, "G", 255); header.channels[1].name[strlen("G")] = '\0';
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:334:1: note: 'strncpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1935:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:455:9: warning: 'strncpy' is deprecated: This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strncpy(header.channels[2].name, "R", 255); header.channels[2].name[strlen("R")] = '\0';
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:334:1: note: 'strncpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1935:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_NFUNC_0_2_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1, _TType2 _TArg2);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:269:47: warning: DPCT1083:221: The size of float3 in the migrated code may be different from the original code. Check that the allocated memory size in the migrated code is correct.
    int byteSizeFloat3 = mRdrWidth*mRdrHeight*sizeof(float3);
                                              ^
D:\GitHub\Blaze\src\RenderEngine.cu:272:21: warning: DPCT1003:222: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMallocManaged((void **)&mFrameBuffer, byteSizeFloat3));
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:274:21: warning: DPCT1003:223: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void **)&d_mShader, sizeof(Shader *)));
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:275:21: warning: DPCT1003:224: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void **)&d_mCamera, sizeof(Camera *)));
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:276:21: warning: DPCT1003:225: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void **)&d_mLights, scn.lightCount*sizeof(Light *)));
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:278:21: warning: DPCT1010:226: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:279:21: warning: DPCT1003:227: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaDeviceSynchronize());
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:299:21: warning: DPCT1003:228: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemcpyToSymbol(c_filterData, weights, sizeof(float4)*mFilterSize));
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:307:21: warning: DPCT1003:229: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(mFrameBuffer));
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:309:21: warning: DPCT1010:230: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:318:21: warning: DPCT1010:231: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:319:21: warning: DPCT1003:232: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaDeviceSynchronize());
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:321:24: warning: DPCT1008:233: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->scatter_in = clock();
                       ^
D:\GitHub\Blaze\src\RenderEngine.cu:332:25: warning: DPCT1010:234: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\RenderEngine.cu:333:25: warning: DPCT1003:235: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\RenderEngine.cu:340:29: warning: DPCT1010:236: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
            checkCudaErrors(cudaGetLastError());
                            ^
D:\GitHub\Blaze\src\RenderEngine.cu:341:29: warning: DPCT1003:237: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
            checkCudaErrors(cudaDeviceSynchronize());
                            ^
D:\GitHub\Blaze\src\RenderEngine.cu:350:25: warning: DPCT1008:238: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->scatter_out = clock();
                        ^
D:\GitHub\Blaze\src\RenderEngine.cu:352:23: warning: DPCT1008:239: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->render_in = clock();
                      ^
D:\GitHub\Blaze\src\RenderEngine.cu:360:21: warning: DPCT1010:240: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:361:21: warning: DPCT1003:241: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaDeviceSynchronize());
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:363:24: warning: DPCT1008:242: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->render_out = clock();
                       ^
D:\GitHub\Blaze\src\RenderEngine.cu:369:28: warning: DPCT1008:243: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->writeToDisk_in = clock();
                           ^
D:\GitHub\Blaze\src\RenderEngine.cu:475:29: warning: DPCT1008:244: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->writeToDisk_out = clock();
                            ^
D:\GitHub\Blaze\thirdparty\lodepng\lodepng.cpp:367:10: warning: 'fopen' is deprecated: This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
  file = fopen(filename, "rb");
         ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h:212:20: note: 'fopen' has been explicitly marked deprecated here
    _Check_return_ _CRT_INSECURE_DEPRECATE(fopen_s)
                   ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\thirdparty\lodepng\lodepng.cpp:389:10: warning: 'fopen' is deprecated: This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
  file = fopen(filename, "wb" );
         ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h:212:20: note: 'fopen' has been explicitly marked deprecated here
    _Check_return_ _CRT_INSECURE_DEPRECATE(fopen_s)
                   ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:25:
D:\GitHub\Blaze\src/../thirdparty/cuda-noise/cuda_noise.cuh:806:17: warning: enumeration values 'BASIS_DISCRETE' and 'BASIS_SPOTS' not handled in switch [-Wswitch]
        switch (inFunc)
                ^~~~~~
D:\GitHub\Blaze\src/../thirdparty/cuda-noise/cuda_noise.cuh:845:17: warning: enumeration values 'BASIS_DISCRETE' and 'BASIS_SPOTS' not handled in switch [-Wswitch]
        switch (outFunc)
                ^~~~~~~
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:27:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:35:
D:\GitHub\Blaze\src/Parser.h:45:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneDir, getDirPath(actualpath).c_str());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:27:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:35:
D:\GitHub\Blaze\src/Parser.h:54:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->sceneName, d["sceneName"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:27:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:35:
D:\GitHub\Blaze\src/Parser.h:56:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->particleFile, d["particleFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
In file included from D:\GitHub\Blaze\src\FluidSolver.cu:27:
In file included from D:\GitHub\Blaze\src/FluidSolver.h:35:
D:\GitHub\Blaze\src/Parser.h:62:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
        strcpy(scene->renderFile, d["renderFile"].GetString());
        ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
    __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
    ^
C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
                _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
                ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:320:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Tools\MSVC\14.29.30133\include\vcruntime.h:310:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\GitHub\Blaze\src\FluidSolver.cu:697:21: warning: DPCT1003:245: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mTFront, mByteSize));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:698:21: warning: DPCT1003:246: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mTBack, mByteSize));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:699:21: warning: DPCT1003:247: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mUFront, mByteSizeU));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:700:21: warning: DPCT1003:248: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mUBack, mByteSizeU));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:701:21: warning: DPCT1003:249: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mVFront, mByteSizeV));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:702:21: warning: DPCT1003:250: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mVBack, mByteSizeV));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:703:21: warning: DPCT1003:251: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mWFront, mByteSizeW));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:704:21: warning: DPCT1003:252: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mWBack, mByteSizeW));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:705:21: warning: DPCT1003:253: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemset(d_mTFront, 0, mByteSize));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:706:21: warning: DPCT1003:254: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemset(d_mTBack, 0, mByteSize));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:707:21: warning: DPCT1003:255: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemset(d_mUFront, 0, mByteSizeU));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:708:21: warning: DPCT1003:256: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemset(d_mUBack, 0, mByteSizeU));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:709:21: warning: DPCT1003:257: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemset(d_mVFront, 0, mByteSizeV));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:710:21: warning: DPCT1003:258: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemset(d_mVBack, 0, mByteSizeV));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:711:21: warning: DPCT1003:259: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemset(d_mWFront, 0, mByteSizeW));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:712:21: warning: DPCT1003:260: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemset(d_mWBack, 0, mByteSizeW));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:714:21: warning: DPCT1003:261: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mRhs, mByteSize));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:715:21: warning: DPCT1003:262: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mP, mByteSize));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:716:21: warning: DPCT1003:263: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMemset(d_mP, 0, mByteSize));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:719:21: warning: DPCT1003:264: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void **)&d_mT, sizeof(Grid *)));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:720:21: warning: DPCT1003:265: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void **)&d_mU, sizeof(Grid *)));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:721:21: warning: DPCT1003:266: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void **)&d_mV, sizeof(Grid *)));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:722:21: warning: DPCT1003:267: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void **)&d_mW, sizeof(Grid *)));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:725:21: warning: DPCT1010:268: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:726:21: warning: DPCT1003:269: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaDeviceSynchronize());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:729:58: warning: DPCT1083:270: The size of float3 in the migrated code may be different from the original code. Check that the allocated memory size in the migrated code is correct.
    int byteSizePartFloat3 = scn->sourceMaxParticleCount*sizeof(float3);
                                                         ^
D:\GitHub\Blaze\src\FluidSolver.cu:737:21: warning: DPCT1003:271: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mPartPos, byteSizePartFloat3));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:738:21: warning: DPCT1003:272: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mPartVel, byteSizePartFloat3));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:739:21: warning: DPCT1003:273: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mPartPscale, byteSizePartFloat));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:740:21: warning: DPCT1003:274: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaMalloc((void**)&d_mPartTemp, byteSizePartFloat));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:746:21: warning: DPCT1010:275: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:747:21: warning: DPCT1003:276: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mTFront));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:748:21: warning: DPCT1003:277: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mTBack));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:749:21: warning: DPCT1003:278: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mUFront));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:750:21: warning: DPCT1003:279: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mUBack));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:751:21: warning: DPCT1003:280: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mVFront));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:752:21: warning: DPCT1003:281: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mVBack));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:753:21: warning: DPCT1003:282: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mWFront));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:754:21: warning: DPCT1003:283: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mWBack));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:756:21: warning: DPCT1003:284: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mRhs));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:757:21: warning: DPCT1003:285: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mP));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:760:21: warning: DPCT1003:286: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mPartPos));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:761:21: warning: DPCT1003:287: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mPartVel));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:762:21: warning: DPCT1003:288: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mPartPscale));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:763:21: warning: DPCT1003:289: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaFree(d_mPartTemp));
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:772:23: warning: DPCT1008:290: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->source_in = clock();
                      ^
D:\GitHub\Blaze\src\FluidSolver.cu:785:57: warning: DPCT1083:291: The size of float3 in the migrated code may be different from the original code. Check that the allocated memory size in the migrated code is correct.
                int byteSizePartFloat3 = mParticleCount*sizeof(float3);
                                                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:787:33: warning: DPCT1003:292: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
                checkCudaErrors(cudaMemcpy(d_mPartPos, h_mPartPos, byteSizePartFloat3, cudaMemcpyHostToDevice));
                                ^
D:\GitHub\Blaze\src\FluidSolver.cu:788:33: warning: DPCT1003:293: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
                checkCudaErrors(cudaMemcpy(d_mPartVel, h_mPartVel, byteSizePartFloat3, cudaMemcpyHostToDevice));
                                ^
D:\GitHub\Blaze\src\FluidSolver.cu:789:33: warning: DPCT1003:294: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
                checkCudaErrors(cudaMemcpy(d_mPartPscale, h_mPartPscale, byteSizePartFloat, cudaMemcpyHostToDevice));
                                ^
D:\GitHub\Blaze\src\FluidSolver.cu:790:33: warning: DPCT1003:295: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
                checkCudaErrors(cudaMemcpy(d_mPartTemp, h_mPartTemp, byteSizePartFloat, cudaMemcpyHostToDevice));
                                ^
D:\GitHub\Blaze\src\FluidSolver.cu:801:29: warning: DPCT1010:296: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
            checkCudaErrors(cudaGetLastError());
                            ^
D:\GitHub\Blaze\src\FluidSolver.cu:802:29: warning: DPCT1003:297: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
            checkCudaErrors(cudaDeviceSynchronize());
                            ^
D:\GitHub\Blaze\src\FluidSolver.cu:809:29: warning: DPCT1010:298: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
            checkCudaErrors(cudaGetLastError());
                            ^
D:\GitHub\Blaze\src\FluidSolver.cu:810:29: warning: DPCT1003:299: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
            checkCudaErrors(cudaDeviceSynchronize());
                            ^
D:\GitHub\Blaze\src\FluidSolver.cu:814:29: warning: DPCT1010:300: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
            checkCudaErrors(cudaGetLastError());
                            ^
D:\GitHub\Blaze\src\FluidSolver.cu:815:29: warning: DPCT1003:301: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
            checkCudaErrors(cudaDeviceSynchronize());
                            ^
D:\GitHub\Blaze\src\FluidSolver.cu:819:24: warning: DPCT1008:302: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->source_out = clock();
                       ^
D:\GitHub\Blaze\src\FluidSolver.cu:828:34: warning: DPCT1008:303: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->computeDivergence_in = clock();
                                 ^
D:\GitHub\Blaze\src\FluidSolver.cu:832:21: warning: DPCT1010:304: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:833:21: warning: DPCT1003:305: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaDeviceSynchronize());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:835:35: warning: DPCT1008:306: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->computeDivergence_out = clock();
                                  ^
D:\GitHub\Blaze\src\FluidSolver.cu:837:24: warning: DPCT1008:307: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->gsSolve_in = clock();
                       ^
D:\GitHub\Blaze\src\FluidSolver.cu:842:21: warning: DPCT1010:308: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:843:21: warning: DPCT1003:309: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaDeviceSynchronize());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:845:25: warning: DPCT1008:310: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->gsSolve_out = clock();
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:847:39: warning: DPCT1008:311: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->pressureGradientUpdate_in = clock();
                                      ^
D:\GitHub\Blaze\src\FluidSolver.cu:852:21: warning: DPCT1010:312: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:853:21: warning: DPCT1003:313: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaDeviceSynchronize());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:855:40: warning: DPCT1008:314: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->pressureGradientUpdate_out = clock();
                                       ^
D:\GitHub\Blaze\src\FluidSolver.cu:866:25: warning: DPCT1008:315: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->cooldown_in = clock();
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:870:25: warning: DPCT1010:316: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:871:25: warning: DPCT1003:317: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:874:26: warning: DPCT1008:318: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->cooldown_out = clock();
                         ^
D:\GitHub\Blaze\src\FluidSolver.cu:876:21: warning: DPCT1008:319: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->drag_in = clock();
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:880:25: warning: DPCT1010:320: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:881:25: warning: DPCT1003:321: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:884:22: warning: DPCT1008:322: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->drag_out = clock();
                     ^
D:\GitHub\Blaze\src\FluidSolver.cu:886:26: warning: DPCT1008:323: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->vorticity_in = clock();
                         ^
D:\GitHub\Blaze\src\FluidSolver.cu:890:25: warning: DPCT1010:324: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:891:25: warning: DPCT1003:325: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:893:25: warning: DPCT1010:326: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:894:25: warning: DPCT1003:327: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:896:25: warning: DPCT1010:328: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:897:25: warning: DPCT1003:329: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:900:27: warning: DPCT1008:330: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->vorticity_out = clock();
                          ^
D:\GitHub\Blaze\src\FluidSolver.cu:902:25: warning: DPCT1008:331: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->buoyancy_in = clock();
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:906:25: warning: DPCT1010:332: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:907:25: warning: DPCT1003:333: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:910:26: warning: DPCT1008:334: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->buoyancy_out = clock();
                         ^
D:\GitHub\Blaze\src\FluidSolver.cu:912:21: warning: DPCT1008:335: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->wind_in = clock();
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:917:25: warning: DPCT1010:336: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:918:25: warning: DPCT1003:337: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:921:22: warning: DPCT1008:338: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->wind_out = clock();
                     ^
D:\GitHub\Blaze\src\FluidSolver.cu:923:27: warning: DPCT1008:339: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->turbulence_in = clock();
                          ^
D:\GitHub\Blaze\src\FluidSolver.cu:928:25: warning: DPCT1010:340: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:929:25: warning: DPCT1003:341: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:932:25: warning: DPCT1010:342: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
        checkCudaErrors(cudaGetLastError());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:933:25: warning: DPCT1003:343: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
        checkCudaErrors(cudaDeviceSynchronize());
                        ^
D:\GitHub\Blaze\src\FluidSolver.cu:936:28: warning: DPCT1008:344: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->turbulence_out = clock();
                           ^
D:\GitHub\Blaze\src\FluidSolver.cu:940:23: warning: DPCT1008:345: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->advect_in = clock();
                      ^
D:\GitHub\Blaze\src\FluidSolver.cu:946:21: warning: DPCT1010:346: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:947:21: warning: DPCT1003:347: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaDeviceSynchronize());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:949:24: warning: DPCT1008:348: clock function is not defined in SYCL. This is a hardware-specific feature. Consult with your hardware vendor to find a replacement.
    mTmr->advect_out = clock();
                       ^
D:\GitHub\Blaze\src\FluidSolver.cu:952:21: warning: DPCT1010:349: SYCL uses exceptions to report errors and does not use the error codes. The call was replaced with 0. You need to rewrite this code.
    checkCudaErrors(cudaGetLastError());
                    ^
D:\GitHub\Blaze\src\FluidSolver.cu:953:21: warning: DPCT1003:350: Migrated API does not return error code. (*, 0) is inserted. You may need to rewrite this code.
    checkCudaErrors(cudaDeviceSynchronize());
                    ^
D:\GitHub\Blaze\src\RenderEngine.cu:73:65: warning: DPCT1050:351: The template argument of the image_accessor_ext could not be deduced. You need to update this code.
__global__ void write_scatter_to_3d_tex_kernel(Grid **tempGrid, cudaTextureObject_t scatterTex,
                                                                ^
D:\GitHub\Blaze\src\RenderEngine.cu:98:62: warning: DPCT1050:352: The template argument of the image_accessor_ext could not be deduced. You need to update this code.
__global__ void write_temp_to_3d_tex_kernel(Grid **tempGrid, cudaTextureObject_t tempTex)
                                                             ^
Saved new version of d:\github\blaze\migration\src\camera.h.yaml file
Saved new version of d:\github\blaze\migration\src\colorramp.h.yaml file
Saved new version of d:\github\blaze\migration\src\fluidsolver.h.yaml file
Saved new version of d:\github\blaze\migration\src\grid.h.yaml file
Saved new version of d:\github\blaze\migration\src\light.h.yaml file
Saved new version of d:\github\blaze\migration\src\parser.h.yaml file
Saved new version of d:\github\blaze\migration\src\ray.h.yaml file
Saved new version of d:\github\blaze\migration\src\renderengine.h.yaml file
Saved new version of d:\github\blaze\migration\src\scenesettings.h.yaml file
Saved new version of d:\github\blaze\migration\src\shader.h.yaml file
Saved new version of d:\github\blaze\migration\src\volume.h.yaml file
Saved new version of d:\github\blaze\migration\src\utils\helper_cuda.h.yaml file
Saved new version of d:\github\blaze\migration\src\utils\helper_math.h.yaml file
Saved new version of d:\github\blaze\migration\thirdparty\cuda-noise\cuda_noise.dp.hpp.yaml file
Saved new version of d:\github\blaze\migration\thirdparty\tinyexr\tinyexr.h.yaml file

Processing: D:\GitHub\Blaze\src\main.cu
Processing: D:\GitHub\Blaze\src\RenderEngine.cu
Processing: D:\GitHub\Blaze\thirdparty\lodepng\lodepng.cpp
Processing: D:\GitHub\Blaze\src\FluidSolver.cu
Processed 18 file(s) in -in-root folder "D:\GitHub\Blaze"

See Diagnostics Reference to resolve warnings and complete the migration:
https://software.intel.com/content/www/us/en/develop/documentation/intel-dpcpp-compatibility-tool-user-guide/top/diagnostics-reference.html


